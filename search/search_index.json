{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udc0d Welcome to CodeMine: Python Course Welcome to your interactive Python course site! Start exploring and testing code. For better tutorial, go to W3Schools Python","title":"Home"},{"location":"#welcome-to-codemine-python-course","text":"Welcome to your interactive Python course site! Start exploring and testing code. For better tutorial, go to W3Schools Python","title":"\ud83d\udc0d Welcome to CodeMine: Python Course"},{"location":"Functions/","text":"Variables Learn how to create and use variables in Python. # Edit these lines, then click \u201cRun\u201d x = 5 y = \"Hello\" print(x, y) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"variables\"); } else { // If the runner.js hasn\u2019t loaded yet, check again in 50ms setTimeout(waitForRunner, 50); } })(); Functions Learn how to define and call functions in Python. # Edit these lines, then click \u201cRun\u201d def greet(name): return f\"Hello, {name}!\" print(greet(\"World\")) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"functions\"); } else { // If the runner.js hasn\u2019t loaded yet, check again in 50ms setTimeout(waitForRunner, 50); } })(); Loops # This block is independent of \u201cvariables\u201d for i in range(3): print(\"Loop iteration\", i) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"loops\"); } else { // If the runner.js hasn\u2019t loaded yet, check again in 50ms setTimeout(waitForRunner, 50); } })();","title":"Functions"},{"location":"Functions/#variables","text":"Learn how to create and use variables in Python. # Edit these lines, then click \u201cRun\u201d x = 5 y = \"Hello\" print(x, y) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"variables\"); } else { // If the runner.js hasn\u2019t loaded yet, check again in 50ms setTimeout(waitForRunner, 50); } })();","title":"Variables"},{"location":"Functions/#functions","text":"Learn how to define and call functions in Python. # Edit these lines, then click \u201cRun\u201d def greet(name): return f\"Hello, {name}!\" print(greet(\"World\")) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"functions\"); } else { // If the runner.js hasn\u2019t loaded yet, check again in 50ms setTimeout(waitForRunner, 50); } })();","title":"Functions"},{"location":"Functions/#loops","text":"# This block is independent of \u201cvariables\u201d for i in range(3): print(\"Loop iteration\", i) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"loops\"); } else { // If the runner.js hasn\u2019t loaded yet, check again in 50ms setTimeout(waitForRunner, 50); } })();","title":"Loops"},{"location":"interactive_python/","text":"print(\"Hello from Pyodide!\") Loading... let pyodideReady = false; async function loadPyodideAndPackages() { window.pyodide = await loadPyodide(); pyodideReady = true; document.getElementById(\"run-btn\").innerText = \"Run\"; document.getElementById(\"run-btn\").disabled = false; } loadPyodideAndPackages(); document.getElementById(\"run-btn\").addEventListener(\"click\", async () => { if (!pyodideReady) { document.getElementById(\"output\").textContent = \"Pyodide not loaded yet.\"; return; } const code = document.getElementById(\"code\").value; // Python code wrapper to capture stdout const wrappedCode = ` import sys import io _output = io.StringIO() sys.stdout = _output try: ${code.split('\\n').map(line => ' ' + line).join('\\n')} except Exception as e: print(e) sys.stdout = sys.__stdout__ _output.getvalue() `; try { const output = await window.pyodide.runPythonAsync(wrappedCode); document.getElementById(\"output\").textContent = output; } catch (err) { document.getElementById(\"output\").textContent = err; } });","title":"Interactive Python"},{"location":"tutorial/","text":"Python Basics Tutorial Welcome to this hands-on Python tutorial. Each section includes: A brief explanation of a core concept. A live, editable code example you can run directly in the browser. Tip: If you\u2019re new to MkDocs-Material, you can preview this page locally by running: bash mkdocs serve and browsing to http://127.0.0.1:8000/tutorial/ . Table of Contents Introduction Variables Functions Loops Conditionals Lists (Add more sections here\u2026) Introduction In this tutorial, we\u2019ll cover the absolute basics of Python: Variables : how to store values. Functions : how to group reusable logic. Loops : how to repeat actions. Conditionals : how to make decisions. Lists : how to work with ordered collections. Every code snippet below is fully editable\u2014just click Run to see the result. Variables Learn how to create and use variables in Python. A variable is simply a name that refers to a value (like an integer, string, or any object). # Try editing these lines, then click \u201cRun\u201d x = 5 y = \"Hello, Python!\" print(\"x =\", x) print(\"y =\", y) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"variables\"); } else { setTimeout(waitForRunner, 50); } })(); Explanation We assign 5 to x and a string to y . The print(...) function displays values in the output area. Change x or y and rerun to see different results. Functions Functions let you package a set of statements and reuse them by name. They can accept parameters and return values. # Define a function that takes a name and returns a greeting def greet(name): return f\"Hello, {name}!\" # Call the function and print the result message = greet(\"Alice\") print(message) # Try changing \"Alice\" to your own name and rerun Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"functions\"); } else { setTimeout(waitForRunner, 50); } })(); Explanation def greet(name): starts a function definition called greet , with one parameter ( name ). return f\"Hello, {name}!\" uses an f-string to build a greeting. We call greet(\"Alice\") , store it in message , and then print it. Edit the string (\u201cAlice\u201d \u2192 something else) to test how parameters work. Loops Loops let you repeat a block of code multiple times. The most common are for -loops and while -loops. # A simple for-loop that prints numbers 0, 1, 2 for i in range(3): print(\"Loop iteration:\", i) # A while-loop that counts down from 3 to 1 count = 3 while count > 0: print(\"Countdown:\", count) count -= 1 Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"loops\"); } else { setTimeout(waitForRunner, 50); } })(); Explanation for i in range(3): repeats the indented block with i = 0, 1, 2 . while count > 0: repeats as long as count is greater than zero. Inside, we decrement count . Conditionals Conditionals let you execute code based on boolean expressions ( if , elif , else ). # Example of if/elif/else x = 10 if x < 5: print(\"x is less than 5\") elif x == 5: print(\"x is exactly 5\") else: print(\"x is greater than 5\") # Try changing the value of x and rerun Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"conditionals\"); } else { setTimeout(waitForRunner, 50); } })(); Explanation if x < 5: checks if x is less than 5. elif x == 5: checks if x is exactly 5. else: handles all other cases. Change x to other values to see different branches run. Lists Lists are ordered collections that can hold items of any type. You can index them, append items, and iterate through them. # Lists in Python fruits = [\"apple\", \"banana\", \"cherry\"] print(\"First fruit:\", fruits[0]) # Add a new item fruits.append(\"date\") print(\"All fruits:\", fruits) # Use a for-loop to iterate over the list for fruit in fruits: print(\"I like\", fruit) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"lists\"); } else { setTimeout(waitForRunner, 50); } })(); Explanation fruits = [\"apple\", \"banana\", \"cherry\"] creates a list of strings. fruits[0] accesses the first element. fruits.append(\"date\") adds a new element at the end. The for fruit in fruits: loop iterates over each element. (Add More Sections Here\u2026) Feel free to copy any of the existing patterns above (Variables, Functions, Loops, Conditionals, Lists) and change: The section heading and explanatory text. The unique suffix in the IDs (e.g., \"newsection\" \u2192 id=\"code-newsection\" , etc.). The code inside <textarea>\u2026</textarea> . The argument in setupPyodideRunner(\"newsection\") . Example placeholder for another section: ```markdown Tuples # Tuples are like lists but immutable coords = (10, 20) print(\"Coordinates:\", coords) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"tuples\"); } else { setTimeout(waitForRunner, 50); } })();","title":"tutorial"},{"location":"tutorial/#python-basics-tutorial","text":"Welcome to this hands-on Python tutorial. Each section includes: A brief explanation of a core concept. A live, editable code example you can run directly in the browser. Tip: If you\u2019re new to MkDocs-Material, you can preview this page locally by running: bash mkdocs serve and browsing to http://127.0.0.1:8000/tutorial/ .","title":"Python Basics Tutorial"},{"location":"tutorial/#table-of-contents","text":"Introduction Variables Functions Loops Conditionals Lists (Add more sections here\u2026)","title":"Table of Contents"},{"location":"tutorial/#introduction","text":"In this tutorial, we\u2019ll cover the absolute basics of Python: Variables : how to store values. Functions : how to group reusable logic. Loops : how to repeat actions. Conditionals : how to make decisions. Lists : how to work with ordered collections. Every code snippet below is fully editable\u2014just click Run to see the result.","title":"Introduction"},{"location":"tutorial/#variables","text":"Learn how to create and use variables in Python. A variable is simply a name that refers to a value (like an integer, string, or any object). # Try editing these lines, then click \u201cRun\u201d x = 5 y = \"Hello, Python!\" print(\"x =\", x) print(\"y =\", y) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"variables\"); } else { setTimeout(waitForRunner, 50); } })();","title":"Variables"},{"location":"tutorial/#explanation","text":"We assign 5 to x and a string to y . The print(...) function displays values in the output area. Change x or y and rerun to see different results.","title":"Explanation"},{"location":"tutorial/#functions","text":"Functions let you package a set of statements and reuse them by name. They can accept parameters and return values. # Define a function that takes a name and returns a greeting def greet(name): return f\"Hello, {name}!\" # Call the function and print the result message = greet(\"Alice\") print(message) # Try changing \"Alice\" to your own name and rerun Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"functions\"); } else { setTimeout(waitForRunner, 50); } })();","title":"Functions"},{"location":"tutorial/#explanation_1","text":"def greet(name): starts a function definition called greet , with one parameter ( name ). return f\"Hello, {name}!\" uses an f-string to build a greeting. We call greet(\"Alice\") , store it in message , and then print it. Edit the string (\u201cAlice\u201d \u2192 something else) to test how parameters work.","title":"Explanation"},{"location":"tutorial/#loops","text":"Loops let you repeat a block of code multiple times. The most common are for -loops and while -loops. # A simple for-loop that prints numbers 0, 1, 2 for i in range(3): print(\"Loop iteration:\", i) # A while-loop that counts down from 3 to 1 count = 3 while count > 0: print(\"Countdown:\", count) count -= 1 Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"loops\"); } else { setTimeout(waitForRunner, 50); } })();","title":"Loops"},{"location":"tutorial/#explanation_2","text":"for i in range(3): repeats the indented block with i = 0, 1, 2 . while count > 0: repeats as long as count is greater than zero. Inside, we decrement count .","title":"Explanation"},{"location":"tutorial/#conditionals","text":"Conditionals let you execute code based on boolean expressions ( if , elif , else ). # Example of if/elif/else x = 10 if x < 5: print(\"x is less than 5\") elif x == 5: print(\"x is exactly 5\") else: print(\"x is greater than 5\") # Try changing the value of x and rerun Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"conditionals\"); } else { setTimeout(waitForRunner, 50); } })();","title":"Conditionals"},{"location":"tutorial/#explanation_3","text":"if x < 5: checks if x is less than 5. elif x == 5: checks if x is exactly 5. else: handles all other cases. Change x to other values to see different branches run.","title":"Explanation"},{"location":"tutorial/#lists","text":"Lists are ordered collections that can hold items of any type. You can index them, append items, and iterate through them. # Lists in Python fruits = [\"apple\", \"banana\", \"cherry\"] print(\"First fruit:\", fruits[0]) # Add a new item fruits.append(\"date\") print(\"All fruits:\", fruits) # Use a for-loop to iterate over the list for fruit in fruits: print(\"I like\", fruit) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"lists\"); } else { setTimeout(waitForRunner, 50); } })();","title":"Lists"},{"location":"tutorial/#explanation_4","text":"fruits = [\"apple\", \"banana\", \"cherry\"] creates a list of strings. fruits[0] accesses the first element. fruits.append(\"date\") adds a new element at the end. The for fruit in fruits: loop iterates over each element.","title":"Explanation"},{"location":"tutorial/#add-more-sections-here","text":"Feel free to copy any of the existing patterns above (Variables, Functions, Loops, Conditionals, Lists) and change: The section heading and explanatory text. The unique suffix in the IDs (e.g., \"newsection\" \u2192 id=\"code-newsection\" , etc.). The code inside <textarea>\u2026</textarea> . The argument in setupPyodideRunner(\"newsection\") . Example placeholder for another section: ```markdown","title":"(Add More Sections Here\u2026)"},{"location":"tutorial/#tuples","text":"# Tuples are like lists but immutable coords = (10, 20) print(\"Coordinates:\", coords) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"tuples\"); } else { setTimeout(waitForRunner, 50); } })();","title":"Tuples"},{"location":"variables%20%28copy%29/","text":"Variables Learn how to create and use variables in Python. ```python x = 5 y = \"Hello\" print(x, y)","title":"Variables"},{"location":"variables%20%28copy%29/#variables","text":"Learn how to create and use variables in Python. ```python x = 5 y = \"Hello\" print(x, y)","title":"Variables"},{"location":"variables/","text":"Variables Learn how to create and use variables in Python. # Edit these lines, then click \u201cRun\u201d x = 5 y = \"Hello\" print(x, y) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"variables\"); } else { // If the runner.js hasn\u2019t loaded yet, check again in 50ms setTimeout(waitForRunner, 50); } })();","title":"variables"},{"location":"variables/#variables","text":"Learn how to create and use variables in Python. # Edit these lines, then click \u201cRun\u201d x = 5 y = \"Hello\" print(x, y) Run (function waitForRunner() { if (typeof setupPyodideRunner === \"function\") { setupPyodideRunner(\"variables\"); } else { // If the runner.js hasn\u2019t loaded yet, check again in 50ms setTimeout(waitForRunner, 50); } })();","title":"Variables"}]}